using System;
using Confluent.Kafka;
using System.Threading;

class Program
{
    static void Main(string[] args)
    {
        // Kafka Producer Configuration
        var producerConfig = new ProducerConfig
        {
            BootstrapServers = "YOUR_KAFKA_BROKER_ADDRESS:9092"
        };

        // Create a new Kafka producer instance using the configuration
        using var producer = new ProducerBuilder<Null, string>(producerConfig).Build();

        // Kafka topic to produce and consume messages
        var topic = "my-topic";

        Console.WriteLine("Kafka Producer and Consumer have been initiated...");

        // Kafka Consumer Configuration
        var consumerConfig = new ConsumerConfig
        {
            BootstrapServers = "YOUR_KAFKA_BROKER_ADDRESS:9092",
            GroupId = "my-consumer-group",
            AutoOffsetReset = AutoOffsetReset.Earliest
        };

        // Create a new Kafka consumer instance using the configuration
        using var consumer = new ConsumerBuilder<Ignore, string>(consumerConfig).Build();

        // Subscribe the consumer to the Kafka topic
        consumer.Subscribe(topic);

        // Set up a flag to control the consumer loop
        bool consuming = true;

        // Register a handler for the CancelKeyPress event to gracefully exit the consumer loop
        Console.CancelKeyPress += (_, e) =>
        {
            e.Cancel = true;
            consuming = false;
        };

        // Start the producer and consumer loops
        while (true)
        {
            // Producer: Generate a new message as a JSON string
            var message = GenerateMessage();

            // Producer: Produce the message to the Kafka topic "my-topic"
            producer.Produce(topic, new Message<Null, string> { Value = message });

            // Add a delay of 1 second before producing the next message
            Thread.Sleep(1000);

            // Consumer: Poll for any new messages
            var consumeResult = consumer.Consume(TimeSpan.FromMilliseconds(100));

            // Consumer: Check if a message was consumed
            if (consumeResult != null)
            {
                // Consumer: Process the consumed message
                Console.WriteLine($"Consumed message: {consumeResult.Message.Value}");
            }
        }
    }

    // Method to generate a new message as a JSON string
    static string GenerateMessage()
    {
        // For simplicity, let's generate a random number as the message content
        var random = new Random();
        var randomNumber = random.Next(1, 100);

        // Create a simple JSON object with the random number
        var data = new
        {
            number = randomNumber
        };

        // Convert the JSON object to a JSON string
        return System.Text.Json.JsonSerializer.Serialize(data);
    }
}



using System;
using Confluent.Kafka;

namespace KafkaDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            var brokerList = "localhost:9092";
            var topic = "test";

            // Create a producer configuration
            var config = new ProducerConfig
            {
                BootstrapServers = brokerList
            };

            // Create a consumer configuration
            var consumerConfig = new ConsumerConfig
            {
                BootstrapServers = brokerList,
                GroupId = "test-group"
            };

            // Produce messages to the topic
            using (var producer = new ProducerBuilder<string, string>(config).Build())
            {
                for (int i = 1; i <= 5; i++)
                {
                    var message = new Message<string, string> { Key = null, Value = $"Message {i}" };
                    producer.Produce(topic, message, deliveryReport => {
                        Console.WriteLine($"Produced: {message.Value}");
                    });
                }

                producer.Flush(TimeSpan.FromSeconds(10)); // Wait for messages to be sent (10 seconds)
            }

            // Consume messages from the topic
            using (var consumer = new ConsumerBuilder<string, string>(consumerConfig).Build())
            {
                consumer.Subscribe(topic);

                while (true)
                {
                    var message = consumer.Consume(TimeSpan.FromSeconds(1));
                    if (message == null)
                        continue;

                    Console.WriteLine($"Consumed: {message.Message.Value}");
                }
            }
        }
    }
}





this one worked and produced messages

using System;
using Confluent.Kafka;

namespace KafkaDemo
{
    // Producer interface
    public interface IMessageProducer
    {
        void ProduceMessages(string brokerList, string topic);
    }

    // Consumer interface
    public interface IMessageConsumer
    {
        void ConsumeMessages(string brokerList, string topic);
    }

    // Concrete implementation of IMessageProducer
    public class KafkaMessageProducer : IMessageProducer
    {
        public void ProduceMessages(string brokerList, string topic)
        {
            var config = new ProducerConfig
            {
                BootstrapServers = brokerList
            };

            using (var producer = new ProducerBuilder<string, string>(config).Build())
            {
                for (int i = 1; i <= 5; i++)
                {
                    var message = new Message<string, string> { Key = null, Value = $"Message {i}" };
                    producer.Produce(topic, message, dr => Console.WriteLine($"Produced: {dr.Message.Value}"));
                    producer.Flush(TimeSpan.FromSeconds(10));
                }
            }
        }
    }

    // Concrete implementation of IMessageConsumer
    public class KafkaMessageConsumer : IMessageConsumer
    {
        public void ConsumeMessages(string brokerList, string topic)
        {
            var config = new ConsumerConfig
            {
                BootstrapServers = brokerList,
                GroupId = "test-group"
            };

            using (var consumer = new ConsumerBuilder<string, string>(config).Build())
            {
                consumer.Subscribe(topic);

                while (true)
                {
                    var message = consumer.Consume(TimeSpan.FromSeconds(1));
                    if (message == null)
                        continue;

                    Console.WriteLine($"Consumed: {message.Message.Value}");
                }
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var brokerList = "localhost:9092";
            var topic = "test";

            try
            {
                IMessageProducer producer = new KafkaMessageProducer();
                producer.ProduceMessages(brokerList, topic);

                IMessageConsumer consumer = new KafkaMessageConsumer();
                consumer.ConsumeMessages(brokerList, topic);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }
}
